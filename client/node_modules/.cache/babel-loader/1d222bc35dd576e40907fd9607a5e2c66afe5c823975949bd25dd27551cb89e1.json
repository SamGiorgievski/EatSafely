{"ast":null,"code":"var _objectSpread = require(\"/Users/bradwilliams/Builds/EatSafely/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = function (page) {\n  var blocks = [];\n  var paragraphs = [];\n  var lines = [];\n  var words = [];\n  var symbols = [];\n  if (page.blocks) {\n    page.blocks.forEach(function (block) {\n      block.paragraphs.forEach(function (paragraph) {\n        paragraph.lines.forEach(function (line) {\n          line.words.forEach(function (word) {\n            word.symbols.forEach(function (sym) {\n              symbols.push(_objectSpread(_objectSpread({}, sym), {}, {\n                page: page,\n                block: block,\n                paragraph: paragraph,\n                line: line,\n                word: word\n              }));\n            });\n            words.push(_objectSpread(_objectSpread({}, word), {}, {\n              page: page,\n              block: block,\n              paragraph: paragraph,\n              line: line\n            }));\n          });\n          lines.push(_objectSpread(_objectSpread({}, line), {}, {\n            page: page,\n            block: block,\n            paragraph: paragraph\n          }));\n        });\n        paragraphs.push(_objectSpread(_objectSpread({}, paragraph), {}, {\n          page: page,\n          block: block\n        }));\n      });\n      blocks.push(_objectSpread(_objectSpread({}, block), {}, {\n        page: page\n      }));\n    });\n  }\n  return _objectSpread(_objectSpread({}, page), {}, {\n    blocks: blocks,\n    paragraphs: paragraphs,\n    lines: lines,\n    words: words,\n    symbols: symbols\n  });\n};","map":{"version":3,"names":["module","exports","page","blocks","paragraphs","lines","words","symbols","forEach","block","paragraph","line","word","sym","push"],"sources":["/Users/bradwilliams/Builds/EatSafely/client/node_modules/tesseract.js/src/utils/circularize.js"],"sourcesContent":["/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  if (page.blocks) {\n    page.blocks.forEach((block) => {\n      block.paragraphs.forEach((paragraph) => {\n        paragraph.lines.forEach((line) => {\n          line.words.forEach((word) => {\n            word.symbols.forEach((sym) => {\n              symbols.push({\n                ...sym, page, block, paragraph, line, word,\n              });\n            });\n            words.push({\n              ...word, page, block, paragraph, line,\n            });\n          });\n          lines.push({\n            ...line, page, block, paragraph,\n          });\n        });\n        paragraphs.push({\n          ...paragraph, page, block,\n        });\n      });\n      blocks.push({\n        ...block, page,\n      });\n    });\n  }\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG,UAACC,IAAI,EAAK;EACzB,IAAMC,MAAM,GAAG,EAAE;EACjB,IAAMC,UAAU,GAAG,EAAE;EACrB,IAAMC,KAAK,GAAG,EAAE;EAChB,IAAMC,KAAK,GAAG,EAAE;EAChB,IAAMC,OAAO,GAAG,EAAE;EAElB,IAAIL,IAAI,CAACC,MAAM,EAAE;IACfD,IAAI,CAACC,MAAM,CAACK,OAAO,CAAC,UAACC,KAAK,EAAK;MAC7BA,KAAK,CAACL,UAAU,CAACI,OAAO,CAAC,UAACE,SAAS,EAAK;QACtCA,SAAS,CAACL,KAAK,CAACG,OAAO,CAAC,UAACG,IAAI,EAAK;UAChCA,IAAI,CAACL,KAAK,CAACE,OAAO,CAAC,UAACI,IAAI,EAAK;YAC3BA,IAAI,CAACL,OAAO,CAACC,OAAO,CAAC,UAACK,GAAG,EAAK;cAC5BN,OAAO,CAACO,IAAI,iCACPD,GAAG;gBAAEX,IAAI,EAAJA,IAAI;gBAAEO,KAAK,EAALA,KAAK;gBAAEC,SAAS,EAATA,SAAS;gBAAEC,IAAI,EAAJA,IAAI;gBAAEC,IAAI,EAAJA;cAAI,GAC1C;YACJ,CAAC,CAAC;YACFN,KAAK,CAACQ,IAAI,iCACLF,IAAI;cAAEV,IAAI,EAAJA,IAAI;cAAEO,KAAK,EAALA,KAAK;cAAEC,SAAS,EAATA,SAAS;cAAEC,IAAI,EAAJA;YAAI,GACrC;UACJ,CAAC,CAAC;UACFN,KAAK,CAACS,IAAI,iCACLH,IAAI;YAAET,IAAI,EAAJA,IAAI;YAAEO,KAAK,EAALA,KAAK;YAAEC,SAAS,EAATA;UAAS,GAC/B;QACJ,CAAC,CAAC;QACFN,UAAU,CAACU,IAAI,iCACVJ,SAAS;UAAER,IAAI,EAAJA,IAAI;UAAEO,KAAK,EAALA;QAAK,GACzB;MACJ,CAAC,CAAC;MACFN,MAAM,CAACW,IAAI,iCACNL,KAAK;QAAEP,IAAI,EAAJA;MAAI,GACd;IACJ,CAAC,CAAC;EACJ;EAEA,uCACKA,IAAI;IAAEC,MAAM,EAANA,MAAM;IAAEC,UAAU,EAAVA,UAAU;IAAEC,KAAK,EAALA,KAAK;IAAEC,KAAK,EAALA,KAAK;IAAEC,OAAO,EAAPA;EAAO;AAEtD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}