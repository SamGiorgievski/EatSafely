{"ast":null,"code":"const handleCeliacCheck = event => {\n  const celiacChecked = event.target.checked;\n  if (celiacChecked) {\n    // Add wheat, rye, and barley to the list of intolerances\n    const intolerances = ['wheat', 'rye', 'barley'];\n    fetch(\"/update\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        sessionData: storedData.data.user.id,\n        intolerances: intolerances\n      })\n    }).then(res => res.json()).then(data => {\n      sessionStorage.setItem(\"userData\", JSON.stringify(data));\n      setStoredData(data);\n      props.toggle();\n    }).catch(err => console.error(err));\n  } else {\n    fetch(\"/update\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        sessionData: storedData.data.user.id\n      })\n    }).then(res => res.json()).then(data => {\n      sessionStorage.setItem(\"userData\", JSON.stringify(data));\n      setStoredData(data);\n      props.toggle();\n    }).catch(err => console.error(err));\n  }\n};\nexport { handleCeliacCheck };","map":{"version":3,"names":["handleCeliacCheck","event","celiacChecked","target","checked","intolerances","fetch","method","headers","body","JSON","stringify","sessionData","storedData","data","user","id","then","res","json","sessionStorage","setItem","setStoredData","props","toggle","catch","err","console","error"],"sources":["/Users/bradwilliams/EatSafely/client/src/helpers/checkBoxHelpers.js"],"sourcesContent":["const handleCeliacCheck = (event) => {\n  const celiacChecked = event.target.checked;\n\n  if (celiacChecked) {\n    // Add wheat, rye, and barley to the list of intolerances\n    const intolerances = ['wheat', 'rye', 'barley'];\n\n    fetch(\"/update\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        sessionData: storedData.data.user.id,\n        intolerances: intolerances,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        sessionStorage.setItem(\"userData\", JSON.stringify(data));\n        setStoredData(data);\n        props.toggle();\n      })\n      .catch((err) => console.error(err));\n  } else {\n    fetch(\"/update\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        sessionData: storedData.data.user.id,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        sessionStorage.setItem(\"userData\", JSON.stringify(data));\n        setStoredData(data);\n        props.toggle();\n      })\n      .catch((err) => console.error(err));\n  }\n};\n\nexport { handleCeliacCheck };"],"mappings":"AAAA,MAAMA,iBAAiB,GAAIC,KAAK,IAAK;EACnC,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,OAAO;EAE1C,IAAIF,aAAa,EAAE;IACjB;IACA,MAAMG,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;IAE/CC,KAAK,CAAC,SAAS,EAAE;MACfC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,WAAW,EAAEC,UAAU,CAACC,IAAI,CAACC,IAAI,CAACC,EAAE;QACpCX,YAAY,EAAEA;MAChB,CAAC;IACH,CAAC,CAAC,CACCY,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEH,IAAI,IAAK;MACdM,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEX,IAAI,CAACC,SAAS,CAACG,IAAI,CAAC,CAAC;MACxDQ,aAAa,CAACR,IAAI,CAAC;MACnBS,KAAK,CAACC,MAAM,EAAE;IAChB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACvC,CAAC,MAAM;IACLpB,KAAK,CAAC,SAAS,EAAE;MACfC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,WAAW,EAAEC,UAAU,CAACC,IAAI,CAACC,IAAI,CAACC;MACpC,CAAC;IACH,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEH,IAAI,IAAK;MACdM,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEX,IAAI,CAACC,SAAS,CAACG,IAAI,CAAC,CAAC;MACxDQ,aAAa,CAACR,IAAI,CAAC;MACnBS,KAAK,CAACC,MAAM,EAAE;IAChB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACvC;AACF,CAAC;AAED,SAAS1B,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}